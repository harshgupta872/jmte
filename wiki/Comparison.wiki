#summary Comparing JMTE to other template engines.

= Objective =

This page is a naturally biased comparison of JMTE to other template engines.

= Facts (the less biased parts) =

||Template Engine||Runs on GAE||Expressions||[http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf MVC]||Dependencies||Compiler||Target language||
||FreeMarker||Yes||Full||Formatting inside template, expressions inside template||Single JAR 880k||No||Java||
||JMTE||Yes||No operators, but = for strings||Full||Jar bundled with ASM 115k (unbundled 75k)||Optionally to Java byte code||Java||
||StringTemplate3||Yes||No operators||Full||ANTLR2, Jar 120k||No||Java, C#, Python, Ruby, Scala||
||StringTemplate4||Yes||Logical operators||Full||ANTLR3, StringTemplate3, Jar 200k||To internal byte code||Java, Python in preparation (more to come?)||
||Velocity||Yes||Full||Not at all||Jar bundled with commons and oro 800k||No||Java||

= Performance measurements =

This is a tough one. There are so many assumptions you have to make to come up with anything close to a fair comparison. 

My basic assumptions what a realistic scenario would include 
 # a template like [http://jmte.googlecode.com/svn/trunk/test/com/floreysoft/jmte/realLive/template/email.jmte this]
 # loading a template once and have many calls to it - that means loading the template is not part of the measurement, if it was the numbers would look way different

I used the caliper tool for the micro benchmarks, all numbers in micro seconds:

||Template Engine||Real life order email||
||FreeMarker||54,5||
||JMTE||33,8 interpreted, 29,6 compiled||
||StringTemplate3||112,4|| 
||StringTemplate4||39,2||
||Velocity||23,8||

= Oliver's personal estimation (the really biased part) =

My approach for this comparison was to start with a real life template for JMTE and redo it for all the other template engines. I did not try to use any special features of JMTE not present in other template languages - partially because there are none :).

These were my feelings when I did the ports to the other engines
  * *FreeMarker*: Good stuff, easy API, did not like missing model-view separation, some odd behavior at times
  * *Velocity*: Without doubt the worst experience in a while - felt like in the ancient Java days, crazy API, no separation of concerns, no clear concept (or I just did not grok it), outstanding performance probably achieved by lack of abstraction 
  * *StringTemplate 3/4*: Most complete and sound template language, best concept, a little bit harder to learn, API good, biggest burden are the dependencies
  * *JMTE*: just minimal

= Sources =

You can [http://jmte.googlecode.com/files/templatesurvey-more-tests.zip download all sources] of this comparison.

= Performance measurements revisited =

Here are some additional more low level measurements:

== Simple expression ==

{{{${simple} stuff}}}

{{{
          benchmark   ns logarithmic runtime
         JMTESimple 1286 ==============
 JMTESimpleCompiled  911 =====
          ST4Simple 2416 ==============================
          ST3Simple 1800 ======================
   FreemarkerSimple 2027 =========================
     VelocitySimple  766 =
}}}

== Reflection == 

{{{ ${order.orderDate} }}}

{{{
           benchmark   us logarithmic runtime
         JMTEReflect 1,43 ===
 JMTEReflectCompiled 1,23 =
          ST4Reflect 2,09 ========
          ST3Reflect 4,37 ===================
   FreemarkerReflect 9,30 ==============================
     VelocityReflect 1,24 =

}}}

== If ==

{{{ ${if order.orderDate}${order.orderDate}${else}NIX${end} }}}

{{{
      benchmark    us logarithmic runtime
         JMTEIf  3,82 =========
 JMTEIfCompiled  3,15 ======
          ST4If  2,26 =
          ST3If  6,85 ==================
   FreemarkerIf 14,75 =============================
     VelocityIf  2,42 ==

}}}

== Foreach ==

{{{
${foreach order.items item
}${item}${end}
}}}

{{{
           benchmark   us logarithmic runtime
         JMTEForeach 6,63 ==============
 JMTEForeachCompiled 5,96 ==========
          ST4Foreach 5,44 =======
          ST3Foreach 9,90 ==============================
   FreemarkerForeach 6,09 ===========
     VelocityForeach 4,65 =

}}}